// Generated by CoffeeScript 1.12.3
(function() {
  'use strict';
  TopViewer.Volume = (function() {
    function Volume(options) {
      var addLine, checkEdgeUnique32, checkEdgeUnique64, height, i, isosurfacesGeometry, j, k, l, newwireframeIndexArray, ref, ref1, ref2, setVertexIndexCoordinates, twiceNoEdges, wireframeGeometry, wireframeIndexArray, wireframeIndexArray64, wireframeIndexAttribute;
      this.options = options;
      height = this.options.model.basePositionsTexture.image.height;
      setVertexIndexCoordinates = function(attribute, i, index) {
        attribute.setX(i, index % 4096 / 4096);
        return attribute.setY(i, Math.floor(index / 4096) / height);
      };
      wireframeIndexArray = new Uint32Array(this.options.elements.length / 4 * 6 * 2);
      wireframeIndexArray64 = new Float64Array(wireframeIndexArray.buffer);
      twiceNoEdges = 0;
      checkEdgeUnique32 = new Uint32Array(2);
      checkEdgeUnique64 = new Float64Array(checkEdgeUnique32.buffer);
      debugger;
      addLine = function(a, b, target32, target64) {
        var edge_is_unique, i;
        checkEdgeUnique32[0] = Math.min(a, b);
        checkEdgeUnique32[1] = Math.max(a, b);
        edge_is_unique = true;
        i = 0;
        while (i < twiceNoEdges / 2) {
          if (target64[i] === checkEdgeUnique64[0]) {
            edge_is_unique = false;
            i = twiceNoEdges;
          }
          i++;
        }
        if (edge_is_unique) {
          target32[twiceNoEdges] = a;
          target32[twiceNoEdges + 1] = b;
          return twiceNoEdges += 2;
        }
      };
      for (i = j = 0, ref = Math.max(this.options.elements.length / 4 - 1, 0); 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        addLine(this.options.elements[i * 4 + 0], this.options.elements[i * 4 + 1], wireframeIndexArray, wireframeIndexArray64);
        addLine(this.options.elements[i * 4 + 1], this.options.elements[i * 4 + 2], wireframeIndexArray, wireframeIndexArray64);
        addLine(this.options.elements[i * 4 + 2], this.options.elements[i * 4 + 0], wireframeIndexArray, wireframeIndexArray64);
        addLine(this.options.elements[i * 4 + 0], this.options.elements[i * 4 + 3], wireframeIndexArray, wireframeIndexArray64);
        addLine(this.options.elements[i * 4 + 1], this.options.elements[i * 4 + 3], wireframeIndexArray, wireframeIndexArray64);
        addLine(this.options.elements[i * 4 + 2], this.options.elements[i * 4 + 3], wireframeIndexArray, wireframeIndexArray64);
      }
      debugger;
      newwireframeIndexArray = new Uint32Array(twiceNoEdges);
      for (i = k = 0, ref1 = Math.max(twiceNoEdges - 1, 0); 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
        newwireframeIndexArray[i] = wireframeIndexArray[i];
      }
      wireframeIndexArray = null;
      wireframeIndexArray = newwireframeIndexArray;
      wireframeGeometry = new THREE.BufferGeometry();
      this.wireframeMesh = new THREE.LineSegments(wireframeGeometry, this.options.model.volumeWireframeMaterial);
      wireframeIndexAttribute = new THREE.BufferAttribute(wireframeIndexArray, 2);
      for (i = l = 0, ref2 = Math.max(wireframeIndexArray.length - 1, 0); 0 <= ref2 ? l < ref2 : l > ref2; i = 0 <= ref2 ? ++l : --l) {
        setVertexIndexCoordinates(wireframeIndexAttribute, i, wireframeIndexAttribute[i]);
      }
      wireframeGeometry.addAttribute('vertexIndex', wireframeIndexAttribute);
      wireframeGeometry.drawRange.count = wireframeIndexAttribute.count;

      /*
      connectivity = []
      linesCount = 0
      
      addLine = (a, b) ->
        [a, b] = [b, a] if a > b
      
        connectivity[a] ?= {}
        unless connectivity[a][b]
          connectivity[a][b] = true
          linesCount++
      
      for i in [0...@options.elements.length/4]
        addLine(@options.elements[i*4], @options.elements[i*4+1])
        addLine(@options.elements[i*4+1], @options.elements[i*4+2])
        addLine(@options.elements[i*4+2], @options.elements[i*4])
        addLine(@options.elements[i*4], @options.elements[i*4+3])
        addLine(@options.elements[i*4+1], @options.elements[i*4+3])
        addLine(@options.elements[i*4+2], @options.elements[i*4+3])
      debugger
      wireframeGeometry = new THREE.BufferGeometry()
      @wireframeMesh = new THREE.LineSegments wireframeGeometry, @options.model.volumeWireframeMaterial
      
      wireframeIndexArray = new Uint32Array linesCount * 4
      wireframeIndexAttribute = new THREE.BufferAttribute wireframeIndexArray, 2
      
      lineVertexIndex = 0
      for a in [0...connectivity.length]
        continue unless connectivity[a]
      
        for b of connectivity[a]
          setVertexIndexCoordinates(wireframeIndexAttribute, lineVertexIndex, a)
          setVertexIndexCoordinates(wireframeIndexAttribute, lineVertexIndex + 1, b)
          lineVertexIndex += 2
      
      wireframeGeometry.addAttribute 'vertexIndex', wireframeIndexAttribute
      wireframeGeometry.drawRange.count = linesCount * 2
      
      wireframeGeometry = new THREE.BoxGeometry  1, 1, 1
      @wireframeMesh = new THREE.Mesh wireframeGeometry, new THREE.MeshBasicMaterial  { color: 0x00ff00 }
       */

      /*
       * Create the isosurfaces mesh.
      isosurfacesGeometry = new THREE.BufferGeometry()
      @isosurfacesMesh = new THREE.Mesh isosurfacesGeometry, @options.model.isosurfaceMaterial
      @isosurfacesMesh.receiveShadows = true
      
      tetraCount = @options.elements.length / 4
      
       * Each isosurface vertex needs access to all four tetra vertices.
      for i in [0..3]
         * The format of the array is, for each tetra: 6 * v[i]_x, v[i]_y
        isosurfacesIndexArray = new Uint32Array tetraCount * 12
        isosurfacesIndexAttribute = new THREE.BufferAttribute isosurfacesIndexArray, 2
      
         * Add each tetra vertex (first, second, third or fourth, depending on i) to all 6 isovertices.
        for j in [0...tetraCount]
          for k in [0...6]
            setVertexIndexCoordinates(isosurfacesIndexAttribute, j*6+k, @options.elements[j * 4 + i])
      
        isosurfacesGeometry.addAttribute "vertexIndexCorner#{i+1}", isosurfacesIndexAttribute
      
       * We also need to tell the vertices what their index is and if they are part of the main or additional face.
      isosurfacesCornerIndexArray = new Uint32Array tetraCount * 6
      isosurfacesCornerIndexAttribute = new THREE.BufferAttribute isosurfacesCornerIndexArray, 1
      
      for i in [0...tetraCount]
        for k in [0...6]
          isosurfacesCornerIndexArray[i * 6 + k] = k * 0.1
      
      isosurfacesGeometry.addAttribute "cornerIndex", isosurfacesCornerIndexAttribute
      
      isosurfacesGeometry.drawRange.count = tetraCount * 6
       */
      isosurfacesGeometry = new THREE.BoxGeometry(1, 1, 1);
      this.isosurfacesMesh = new THREE.Mesh(isosurfacesGeometry, new THREE.MeshBasicMaterial({
        color: 0x00ff00
      }));
      this._updateGeometry();
      this.options.model.add(this.isosurfacesMesh);
      this.options.model.add(this.wireframeMesh);
      this.options.engine.renderingControls.addVolume(this.options.name, this);
    }

    Volume.prototype._updateGeometry = function() {
      this._updateBounds(this.wireframeMesh, this.options.model);
      return this._updateBounds(this.isosurfacesMesh, this.options.model);
    };

    Volume.prototype._updateBounds = function(mesh, model) {
      mesh.geometry.boundingBox = this.options.model.boundingBox;
      return mesh.geometry.boundingSphere = this.options.model.boundingSphere;
    };

    Volume.prototype.showFrame = function() {
      if (!this.renderingControls) {
        this.wireframeMesh.visible = false;
        this.isosurfacesMesh.visible = false;
        return;
      }
      this.wireframeMesh.visible = this.renderingControls.showWireframeControl.value();
      return this.isosurfacesMesh.visible = this.renderingControls.showIsosurfacesControl.value();
    };

    return Volume;

  })();

}).call(this);

//# sourceMappingURL=volume.js.map
